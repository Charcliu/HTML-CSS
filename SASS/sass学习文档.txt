###变量声明

$nav_color: #F90;
nav{
  $width: 10px;
  width: $width;
  color: $nav_color;
}
*** 变量声明分为内部声明和外部声明
    1. 内部声明只能在当前{}规则块内部使用
    2. 可以在其他地方使用

###变量引用(变量内部使用变量)

$nav_color: #F90;
$heightlight_border: 1px solid $nav_color;
.selected{
  border: $heightlight_border;
}


###嵌套CSS规则

#content article h1 { color: #333 }
#content article p { margin-bottom: 1.4em }
#content aside { background-color: #EEE }

#content{
  article{
    h1{
      color: #333;
    }
    p{
      margin-bottom: 1.4em;
    }
  }
  aside{
    background-color: #EEE;
  }
}

并且也可以这样子做

#content{
  background-color: #EEE;
  p{
    background-color: #RRR;
  }
}

###父选择器的标识符&

#content a{
  color: green;
  :hover{
    color: red;
  }
}
解析为
#content a{ color : green }
#content a :hover { color : red }
a标签的子元素hover的时候都被渲染为红色，不符合设计初心（只是a标签被hover的时候，渲染为红色）。

#content a{
  color: green;
  &:hover{
    color: red;
  }
}
解析为
#content a{ color : green }
#content a:hover { color : red }
不会像后代选择器那样进行拼接，而是&被父选择器直接替换

###群组选择器的嵌套

.container h1, .container h2, .container h3 { margin-bottom: .8em }
.container {
  h1, h2, h3 { margin-bottom: .8em; }
}

nav a, aside a {color: blue}
nav, aside {
  a {color: blue}
}

###子组合选择器和同层组合选择器：>、+和~;

article section { color: red; }                 article下的所有命中section选择器的元素
article > section { border: 1px solid green; }  选择article下紧跟着的子元素中命中section选择器的元素

同层相邻组合选择器+选择header元素后紧跟的p元素：
header + p { font-size: 1.1em }

同层全体组合选择器~，选择所有跟在article后的同层article元素，不管它们之间隔了多少其他元素：
article ~ article { border-top: 1px dashed #ccc }


###Example
article {
  ~ article { border-top: 1px dashed #ccc }
  > section { background: #eee }
  dl > {
    dt { color: #333 }
    dd { color: #555 }
  }
  nav + & { margin-top: 0 }
}

sass会如你所愿地将这些嵌套规则一一解开组合在一起：

article ~ article { border-top: 1px dashed #ccc }
article > footer { background: #eee }
article dl > dt { color: #333 }
article dl > dd { color: #555 }
nav + article { margin-top: 0 }

###嵌套属性
section {
  border-color: red;
  border-width: 1px;
  border-style: solid;
}

section {
  border {
    color: red;
    width: 1px;
    style: solid;
  }
}

nav {
  border: 1px solid #ccc {
  left: 0px;
  right: 0px;
  }
}

这比下边这种同等样式的写法要好：

nav {
  border: 1px solid #ccc;
  border-left: 0px;
  border-right: 0px;
}

###导入SASS文件
@import "***" 导入sass文件 和css import不同，css import只有执行到import时才导入，sass中的import在生成css文件时就加载进来了。

###SASS局部文件
局部SASS 使用_开头命名sass文件约定为局部文件，编译不会单独解析为css。

###默认变量值
$bgColor: red;
$bgColor: green;
div {
  background-color: $bgColor;
}
渲染为
div {
  background-color: green;
}

common.scss
$bgColor: red;

home.css
$bgColor: green !default;
div {
  background-color: $bgColor;
}

渲染为
div {
  background-color: red;
}

###嵌套导入

common.scss
aside {
  border: 1px solid red;
}

home.css
div {
  @import "common.scss"
}

渲染为
div {
  aside {
    border: 1px solid red;
  }
}

###原生CSS导入
你不能用sass的@import直接导入一个原始的css文件，因为sass会认为你想用css原生的@import。
但是，因为sass的语法完全兼容css，所以你可以把原始的css文件改名为.scss后缀，即可直接导入了。

###静默注释
body {
  color: #333; // 这种注释内容不会出现在生成的css文件中
  padding: 0; /* 这种注释内容会出现在生成的css文件中 */
}

###混合器
可以通过sass的混合器实现大段样式的重用。
@mixin rounded-corners {
  -moz-border-radius: 5px;
  -webkit-border-radius: 5px;
  border-radius: 5px;
}

notice {
  background-color: green;
  border: 2px solid #00aa00;
  @include rounded-corners;
}

解析为

notice {
  background-color: green;
  border: 2px solid #00aa00;
  -moz-border-radius: 5px;
  -webkit-border-radius: 5px;
  border-radius: 5px;
}

###混合器器中的CSS规则
@mixin no-bullets {
  list-style: none;
  li {
    list-style-image: none;
    list-style-type: none;
    margin-left: 0px;
  }
}

ul.plain {
  color: #444;
  @include no-bullets;
}

解析为
ul.plain {
  color: #444;
  list-style: none;
  li {
    list-style-image: none;
    list-style-type: none;
    margin-left: 0px;
  }
}

混合器中也可以使用标识符& + ~

###混合器传参
@mixin link-colors($normal, $hover, $visited) {
  color: $normal;
  &:hover { color: $hover; }
  &:visited { color: $visited; }
}

a {
    @include link-colors(
      $normal: blue,
      $visited: green,
      $hover: red
  );
}
或者
a { @mixin link-colors(blue, red, green) }

解析为

a {
  color: blue;
  &:hover { color: red };
  &:visited { color: green }
}

###混合器默认参数值

@mixin link-colors(
  $normal;
  $hover: $normal;
  $visited: $normal
){
  color: $normal;
  &:hover { color: $hover; }
  &:visited { color: $visited; }
}

a { @include link-colors(red) }
都会被赋值为red
